import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Load data
df = pd.read_csv('Lab_A3_Admission_Predict_Ver1.1.csv')

# Prepare features and labels
features = df.iloc[:, :-1].values
labels = df.iloc[:, -1].values 

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.3, random_state=42)

# Add bias term (intercept)
X_train_bias = np.c_[np.ones(X_train.shape[0]), X_train]
X_test_bias = np.c_[np.ones(X_test.shape[0]), X_test]

# Initialize parameters
n_features = X_train_bias.shape[1]
theta = np.zeros(n_features)
learning_rate = 0.01
epochs = 100

# Gradient Descent
for _ in range(epochs):
    predictions = X_train_bias.dot(theta)
    errors = predictions - y_train
    gradient = (1 / X_train_bias.shape[0]) * X_train_bias.T.dot(errors)
    theta -= learning_rate * gradient

# Make predictions
train_predictions = X_train_bias.dot(theta)
test_predictions = X_test_bias.dot(theta)

# Calculate metrics
train_mse = mean_squared_error(y_train, train_predictions)
train_r2 = r2_score(y_train, train_predictions)
test_mse = mean_squared_error(y_test, test_predictions)
test_r2 = r2_score(y_test, test_predictions)

# Print results
print("Training MSE:", train_mse)
print("Training R² score:", train_r2)
print("Test MSE:", test_mse)
print("Test R² score:", test_r2)